#pragma once

/* Uncomment this to turn on debugging outputs specific to Ob */
/* #define OBDBG */

/* Uncomment this to enable debugging outputs specific to Mm */
/* #define MMDBG */

#include <kernel/gen_config.h>

#include <limits.h>
#include <nt.h>
#include <assert.h>
#include <compile_assert.h>
#include <string.h>
#include <gnu.h>
#include <debug.h>
#include <image.h>
#include <util.h>
#include <services.h>

#include "ke.h"
#include "mm.h"
#include "ex.h"
#include "ob.h"
#include "io.h"
#include "cm.h"
#include "ps.h"
#include "ldr.h"
#include "rtl.h"
#include "hal.h"

/* Generated by syssvc-gen.py */
#include <ntos_syssvc_gen.h>
#include <ntos_wdmsvc_gen.h>

#define UNIMPLEMENTED_ROUTINE				\
    DbgTrace("Routine is unimplemented\n");		\
    HalVgaPrint("%s UNIMPLEMENTED\n", __func__);

#define UNIMPLEMENTED					\
    {							\
	COMPILE_CHECK_ASYNC_RETURN;			\
	UNIMPLEMENTED_ROUTINE;				\
	return STATUS_NOT_IMPLEMENTED;			\
    }

#define UNIMPLEMENTED_ASYNC(State)			\
    {							\
	COMPILE_CHECK_ASYNC_FRAME_SIZE;			\
	UNIMPLEMENTED_ROUTINE;				\
	ASYNC_RETURN(State, STATUS_NOT_IMPLEMENTED);	\
    }

#if defined(CONFIG_DEBUG_BUILD)
VOID vDbgPrint(PCSTR Format, va_list args);
#endif

#define assert_ret(expr)	if (!(expr)) { return STATUS_NTOS_BUG; }

/*
 * Additional alignment macros
 */
#define IS_ALIGNED_BY(addr, align)	((ULONG_PTR)(addr) == ALIGN_DOWN_BY(addr, align))
#define IS_ALIGNED(addr, type)		((ULONG_PTR)(addr) == ALIGN_DOWN(addr, type))
