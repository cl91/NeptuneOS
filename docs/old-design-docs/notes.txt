These are outdated! I'll update this later!

Root task is ntsvc, "NT Executive Services"
ntsvc manages global, privileged data structures, such as global object database
ntsvc performs privileged data structure manipulations, such as process and thread creation and deletion
Initial thread of ntsvc loads the client ntdll.dll, as well as boot device drivers (fat32.sys, disk.sys, vga.sys, etc)
Initial thread starts the first NT client smss.exe
Initial thread of ntsvc then becomes "fault handler" of all of ntsvc.
In case of unrecoverable errors initial thread displays the BSOD.
For each CPU initial thread creates a "handler" thread which accepts incoming requests from NT clients.

Message buffer:
   One 4K page for each thread for each NT client process

Object Manager:
  Server side:
    Maintains global object database "\"
  Client side:
    Maintains local view of global object database
    Maintains client handle table

NtOpenFile():
  Client side:
    ntdll.dll queries local object database to determine the file system driver and its relevant capability
    ntdll.dll sends message to file system driver by invoking said capability
  File system driver server side:
    Queries cached file system metadata to determine access rights
    If cache miss, call cache manager (locally) to retrieve metadata
    Cache manager will locate the underlying disk/network driver and call its driver process
    Disk/network driver returns memory page capabilities of requested metadata
    Cache manager maps memory pages (locally, in file system driver virtual memory space)
    Reply to client by either granting access (returns handle and possibily capability?) or denying access
  Disk/network driver server side:
    Initiate DMA to read data from disk/network
    Reply with capabilities to memory pages read

NtReadFile():
  Client side:
    ntdll.dll calls cache manager to query cache for requested file
    If cache miss, invoke local file system routine to determine disk/network driver process and relevant capability
    Invoke said capability and wait on disk/network driver to return (if blocking IO) or return immediately (if async IO)
    In case of async IO we give a special reply capability of a dedicated "async IO" thread for the driver process to reply to 
  Server side (disk/network driver):
    Initiate DMA to read data from disk/network
    Reply with capabilities to memory pages read
